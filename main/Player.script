function init(self)
	msg.post(".", "acquire_input_focus")
	self.facing = "right"
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	
	if action_id == hash("left") then
		local rotation = go.get_rotation()
		-- rotate the image according to the way the original image is facing and the key pressed by the user
		if self.facing == "right" then
			local addition = vmath.quat_rotation_z(math.pi)
			local new_rotation = addition * rotation
			go.set_rotation(new_rotation)
			self.facing = "left"
		elseif self.facing == "up" then
			local addition =  vmath.quat_rotation_z(math.pi/2)
			local new_rotation = addition * rotation
			go.set_rotation(new_rotation)
			self.facing = "left"
		elseif self.facing == "down" then
			local addition =  vmath.quat_rotation_z(-math.pi/2)
			local new_rotation = addition * rotation
			go.set_rotation(new_rotation)
			self.facing = "left"
		end			
		local position = go.get_position()
		position.x = position.x - 5
		go.set_position(position)
	elseif action_id == hash("right") then
		local rotation = go.get_rotation()
		local position = go.get_position()
		if self.facing == "up" then
			local addition = vmath.quat_rotation_z(-math.pi/2)
			local new_rotation = addition * rotation
			go.set_rotation(new_rotation)
			self.facing = "right"
		elseif self.facing == "left" then
			local addition = vmath.quat_rotation_z(-math.pi/2)
			local new_rotation = addition * rotation
			go.set_rotation(new_rotation)
			self.facing = "right"
		elseif self.facing == "down" then
			local addition = vmath.quat_rotation_z(math.pi/2)
			local new_rotation = addition * rotation
			go.set_rotation(new_rotation)
			self.facing = "right"
		end		
		position.x = position.x + 5
		go.set_position(position)
	elseif action_id == hash("up") then
		local position = go.get_position()
		local rotation = go.get_rotation()
		if self.facing == "right" then
			local addition = vmath.quat_rotation_z(math.pi/2)
			local new_rotation = addition * rotation
			go.set_rotation(new_rotation)
			self.facing = "up"
		elseif self.facing == "left" then
			local addition  = vmath.quat_rotation_z(-math.pi/2)
			local new_rotation = addition * rotation
			go.set_rotation(new_rotation)
			self.facing = "up"
		elseif self.facing == "down" then
			local addition vmath.quat_rotation_z(math.pi/2)
			local new_rotation = addition * rotation
			go.set_rotation(new_rotation)
			self.facing = "up"
		end	
		position.y = position.y + 5
		go.set_position(position)
	elseif action_id == hash("down") then
		local position = go.get_position()
		local rotation = go.get_rotation()
		if self.facing == "up" then
			local addition = vmath.quat_rotation_z(math.pi)
			local new_rotation = addition * rotation
			go.set_rotation(new_rotation)
			self.facing = "down"
		elseif self.facing == "left" then
			local addition =  vmath.quat_rotation_z(math.pi/2)
			local new_rotation = addition * rotation
			go.set_rotation(new_rotation)
			self.facing = "down"
		elseif self.facing == "right" then
			local addition  = vmath.quat_rotation_z(-math.pi/2)
			local new_rotation = addition * rotation
			go.set_rotation(new_rotation)
			self.facing = "down"
		end	
		position.y = position.y - 5
		go.set_position(position)
	elseif action_id == hash("space") then
		local player_pos = go.get_position()
		-- send a message to the bullet to call it and shoot relative to the player's position
		local bullet_pos = vmath.vector3(player_pos.x + 10, player_pos.y, player_pos.z)
		local bullet_rotation = vmath.quat_rotation_z(0)
		msg.post("#bullet_factory", "create", { position = bullet_pos, rotation = bullet_rotation })
	end	
end
